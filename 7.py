# -*- coding: utf-8 -*-
"""Sherin_ACF_PACF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fiofVwj9D8X1gFZAacgcr7WKgJyHoyFG
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

y = np.array([29,20,25,29,31,33,34,27,26,30,
            29,28,28,26,27,26,30,28,26,30,
              31,30,37,30,33,31,27,33,37,29,
              28,30,29,34,30,20,17,23,24,34,
              36,35,33,29,25,27,30,29,28,32])

#ACF

def calculate_acf(y, max_lag):
  n = len(y)
  y_bar = np.mean(y)
  variance = np.sum((y-y_bar)**2)

  acf_vals = []

  for lag in range(max_lag+1):
    if lag==0:
      acf_val= 1.0

    else:
      covariance = 0.0
      for t in range(lag, n):
        covariance += (y[t]-y_bar)*(y[t-lag]-y_bar)

      acf_val = covariance/variance

    acf_vals.append(acf_val)

  return np.array(acf_vals)


acf_vals = calculate_acf(y, 25)
print(acf_vals)

n = len(y)
conf_level = 2/math.sqrt(n)

#visualization
plt.figure(figsize = (10,10))
plt.stem(acf_vals)
plt.axhline(0, color='black')
plt.axhline(conf_level, color = 'red', linestyle='--', label = "95% Confidence level" )
plt.axhline(-conf_level, color = 'red', linestyle='--')
plt.title("ACF")
plt.xlabel("Lag")
plt.ylabel("ACF vals")
plt.legend()
plt.grid(True)

#PACF

def calculate_pacf(y, max_lag):
  rho = calculate_acf(y, max_lag)
  pacf_vals = [1.0]

  for k in range(1, max_lag+1):
    P_k = np.array([[rho[abs(i-j)] for j in range(k)] for i in range(k)])
    rho_k = np.array([rho[i] for i in range(1, k+1)]) # P_k * phi_k = rho_k
    phi_k = np.linalg.solve(P_k, rho_k)
    pacf_vals.append(phi_k[-1])

  return np.array(pacf_vals)

pacf_vals = calculate_pacf(y, 25)
print(pacf_vals)

#significance calculation for pacf
import math

n = len(y)
conf_level = 2/math.sqrt(n)

print("Lag\tPACF\tSignificance\tDecision")
for lag, pacf in enumerate(pacf_vals):
  if lag==0:
    significant = "N/A"
    decision = "PACF(0) = 1 (by definition)"

  else:
    # Null hypothesis: PACF(lag) = 0 => means no significant correlation at that lag
    # Reject H0 if |PACF| > 2/root(n)
    if abs(pacf) > conf_level: #reject h0
      significant = "Yes"
      decision = "Reject H0: Significant partial autocorrelation"

    else:
      significant = "No"
      decision = "Fail to reject H0: Not significant"

  print(f"{lag}\t{pacf}\t{significant}\t{decision}")

#visualization
plt.figure(figsize = (10,10))
plt.stem(pacf_vals)
plt.axhline(0, color='black')
plt.axhline(conf_level, color = 'red', linestyle='--', label = "95% Confidence level" )
plt.axhline(-conf_level, color = 'red', linestyle='--')
plt.title("PACF")
plt.xlabel("Lag")
plt.ylabel("PACF vals")
plt.legend()
plt.grid(True)
